var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = WinTypes","category":"page"},{"location":"#WinTypes","page":"Home","title":"WinTypes","text":"","category":"section"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First install the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"]add WinTypes","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here's an example comparing calling Windows API functions with and without WinTypes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"With WinTypes a Windows API call would look something like:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using WinTypes: HANDLE, DWORD, BOOL\n\nfunction get_console_mode()\n    STD_OUTPUT_HANDLE = -11\n    hOutput = ccall(:GetStdHandle, stdcall, HANDLE, (DWORD,), STD_OUTPUT_HANDLE % DWORD)\n    dwMode = Ref{DWORD}()\n    ccall(:GetConsoleMode, stdcall, BOOL, (HANDLE, Ref{DWORD}), hOutput, dwMode)\n    return dwMode[]\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now, compare this to the call without this package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"\nfunction get_console_mode()\n    STD_OUTPUT_HANDLE = -11\n    hOutput = ccall(:GetStdHandle, stdcall, Ptr{Cvoid}, (UInt32,), STD_OUTPUT_HANDLE % UInt32)\n    dwMode = Ref{UInt32}()\n    ccall(:GetConsoleMode, stdcall, Int32, (Ref{Cvoid}, Ref{UInt32}), hOutput, dwMode)\n    return dwMode[]\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, here are the corresponding Windows API function syntax definitions in C:","category":"page"},{"location":"","page":"Home","title":"Home","text":"HANDLE WINAPI GetStdHandle(\n  _In_ DWORD nStdHandle\n);","category":"page"},{"location":"","page":"Home","title":"Home","text":"BOOL WINAPI GetConsoleMode(\n  _In_  HANDLE  hConsoleHandle,\n  _Out_ LPDWORD lpMode\n);","category":"page"},{"location":"","page":"Home","title":"Home","text":"As you can see, the call to these APIs using WinTypes is easier to translate and directly translatable without manually looking up the myriad Windows data types.","category":"page"},{"location":"#Alias-List","page":"Home","title":"Alias List","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following aliases are defined:","category":"page"},{"location":"","page":"Home","title":"Home","text":"FALSE = Cint(0)\nTRUE = Cint(1)\n\nBOOL = Cint\nBOOLEAN = BYTE\nBYTE = Cuchar\nCCHAR = Cchar\nCHAR = Cchar\nCOLORREF = DWORD\nDWORD = Culong\nDWORDLONG = UInt64\nDWORD32 = UInt32\nDWORD64 = UInt64\nFLOAT = Cfloat\nHACCEL = HANDLE\nHANDLE = Ptr{Cvoid}\nHBITMAP = HANDLE\nHBRUSH = HANDLE\nHCOLORSPACE = HANDLE\nHCONV = HANDLE\nHCONVLIST = HANDLE\nHCURSOR = HICON\nHDC = HANDLE\nHDDEDATA = HANDLE\nHDESK = HANDLE\nHDROP = HANDLE\nHDWP = HANDLE\nHENHMETAFILE = HANDLE\nHFILE = Cint\nHFONT = HANDLE\nHGDIOBJ = HANDLE\nHGLOBAL = HANDLE\nHHOOK = HANDLE\nHICON = HANDLE\nHINSTANCE = HANDLE\nHKEY = HANDLE\nHKL = HANDLE\nHLOCAL = HANDLE\nHMENU = HANDLE\nHMETAFILE = HANDLE\nHMODULE = HANDLE\nHMONITOR = HANDLE\nHPALETTE = HANDLE\nHPEN = HANDLE\nHRESULT = Clong\nHRGN = HANDLE\nHRSRC = HANDLE\nHSZ = HANDLE\nHWINSTA = HANDLE\nHWND = HANDLE\nINT = Cint\nPHANDLE = Ptr{HANDLE}\nPVOID = Ptr{Cvoid}\nLPVOID = Ptr{Cvoid}\nSHORT = Cshort\nUCHAR = Cuchar\nUSHORT = Cushort\nVOID = Cvoid\nWCHAR = Cwchar_t\nWORD = Cushort\nPWCHAR = Ptr{WCHAR}\nPWORD = Ptr{WORD}\nLPWORD = Ptr{WORD}\nPDWORD = Ptr{DWORD}\nLPDWORD = Ptr{DWORD}\n\nPSTR = Ptr{CHAR} # char*\nLPSTR = Ptr{CHAR} # char*\n\nPCSTR  = Ptr{CHAR} # char*\nLPCSTR = Ptr{CHAR} # char*\n\nPWSTR = Ptr{WCHAR} # wchar_t*\nLPWSTR = Ptr{WCHAR} # wchar_t*\n\nPCWSTR = Ptr{WCHAR} # wchar_t*\nLPCWSTR = Ptr{WCHAR} # const wchar_t*","category":"page"},{"location":"#Detailed-References","page":"Home","title":"Detailed References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Below we include detailed documentation for some of the aliases defined in this package. We refer to https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types for those not included below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [WinTypes]","category":"page"},{"location":"#WinTypes.FALSE","page":"Home","title":"WinTypes.FALSE","text":"const FALSE = Cint(0)\n\nA Boolean variable denoting FALSE.\n\n\n\n\n\n","category":"constant"},{"location":"#WinTypes.TRUE","page":"Home","title":"WinTypes.TRUE","text":"const TRUE = Cint(1)\n\nA Boolean variable denoting FALSE. Should only be used in specialized contexts since most functions that reutnr a BOOL type can return any non-zero value to indicate Boolean truth.\n\n\n\n\n\n","category":"constant"},{"location":"#WinTypes.BOOL","page":"Home","title":"WinTypes.BOOL","text":"const BOOL = Cint\n\nA Boolean variable (should be TRUE or FALSE).\n\nThis type is declared in WinDef.h as follows:\n\ntypedef int BOOL;\n\nBOOL is a typedef for an integer value that is used in a Boolean context. The header file WinDef.h also defines two values for use with BOOL.\n\n#define FALSE    0\n#define TRUE     1\n\nSee also: TRUE and FALSE\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.BOOLEAN","page":"Home","title":"WinTypes.BOOLEAN","text":"const BOOLEAN = BYTE\n\nA Boolean variable (should be TRUE or FALSE).\n\nThis type is declared in WinNT.h as follows:\n\ntypedef BYTE BOOLEAN;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.BYTE","page":"Home","title":"WinTypes.BYTE","text":"const BYTE = Cuchar\n\nA byte (8 bits).\n\nThis type is declared in WinDef.h as follows:\n\ntypedef unsigned char BYTE;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.CCHAR","page":"Home","title":"WinTypes.CCHAR","text":"const CCHAR = Cchar\n\nAn 8-bit Windows (ANSI) character.\n\nThis type is declared in WinNT.h as follows:\n\ntypedef char CCHAR;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.CHAR","page":"Home","title":"WinTypes.CHAR","text":"const CCHAR = Cchar\n\nAn 8-bit Windows (ANSI) character.\n\nThis type is declared in WinNT.h as follows:\n\ntypedef char CHAR;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.DWORD","page":"Home","title":"WinTypes.DWORD","text":"const DWORD = Culong\n\nA 32-bit unsigned integer.\n\nThis type is declared in IntSafe.h as follows:\n\ntypedef unsigned long DWORD;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.DWORD32","page":"Home","title":"WinTypes.DWORD32","text":"const DWORD32 = UInt32\n\nA 32-bit unsigned integer.\n\nThis type is declared in BaseTsd.h as follows:\n\ntypedef unsigned int DWORD32;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.DWORD64","page":"Home","title":"WinTypes.DWORD64","text":"const DWORD64 = UInt64\n\nA 64-bit unsigned integer.\n\nThis type is declared in IntSafe.h as follows:\n\ntypedef unsigned __int64 DWORD64;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.DWORDLONG","page":"Home","title":"WinTypes.DWORDLONG","text":"const DWORDLONG = UInt64\n\nA 64-bit unsigned integer.\n\nThis type is declared in IntSafe.h as follows:\n\ntypedef unsigned __int64 DWORDLONG;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.FLOAT","page":"Home","title":"WinTypes.FLOAT","text":"const FLOAT = Cfloat\n\nA floating-point variable.\n\nThis type is declared in WinDef.h as follows:\n\ntypedef float FLOAT;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.HANDLE","page":"Home","title":"WinTypes.HANDLE","text":"const HANDLE = Ptr{Cvoid}\n\nA handle to an object.\n\nThis type is declared in WinNT.h as follows:\n\ntypedef PVOID HANDLE;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.HKEY","page":"Home","title":"WinTypes.HKEY","text":"const HKEY = HANDLE\n\nA handle to a registry key.\n\nThis type is declared in WinDef.h as follows:\n\ntypedef HANDLE HKEY;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.PVOID","page":"Home","title":"WinTypes.PVOID","text":"cosnt PVOID = Ptr{Cvoid}\n\nA pointer to any type.\n\nThis type is declared in WinNT.h as follows:\n\ntypedef void *PVOID;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.SHORT","page":"Home","title":"WinTypes.SHORT","text":"const SHORT = Cshort\n\nA 16-bit integer.\n\nThis type is declared in WinNT.h as follows:\n\ntypedef short SHORT;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.UCHAR","page":"Home","title":"WinTypes.UCHAR","text":"const UCHAR = Cuchar\n\nAn unsigned CHAR.\n\nThis type is declared in WinDef.h as follows:\n\ntypedef unsigned char UCHAR\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.USHORT","page":"Home","title":"WinTypes.USHORT","text":"const USHORT = Cushort\n\nAn unsigned SHORT.\n\nThis type is declared in WinDef.h as follows:\n\ntypedef unsigned short USHORT;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.VOID","page":"Home","title":"WinTypes.VOID","text":"const VOID = Cvoid\n\nAny type.\n\nThis type is declared in WinNT.h as follows:\n\n#define VOID void\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.WCHAR","page":"Home","title":"WinTypes.WCHAR","text":"const WCHAR = Cwchar_t\n\nA 16-bit Unicode character.\n\nThis type is declared in WinNT.h as follows:\n\ntypedef wchar_t WCHAR;\n\n\n\n\n\n","category":"type"},{"location":"#WinTypes.WORD","page":"Home","title":"WinTypes.WORD","text":"const WORD = Cushort\n\nA 16-bit unsigned integer.\n\nThis type is declared in WinDef.h as follows:\n\ntypedef unsigned short WORD;\n\n\n\n\n\n","category":"type"}]
}
